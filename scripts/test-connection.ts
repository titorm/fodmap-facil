#!/usr/bin/env ts-node
/**
 * Script para testar a conex√£o com o Appwrite
 *
 * Verifica:
 * - Conex√£o com o endpoint
 * - Autentica√ß√£o com API Key
 * - Acesso ao projeto
 * - Acesso ao database
 *
 * Uso: pnpm appwrite:test
 */

import { Client, Databases, Account } from 'node-appwrite';
import * as dotenv from 'dotenv';

dotenv.config();

const ENDPOINT = process.env.EXPO_PUBLIC_APPWRITE_ENDPOINT || '';
const PROJECT_ID = process.env.EXPO_PUBLIC_APPWRITE_PROJECT_ID || '';
const API_KEY = process.env.APPWRITE_API_KEY || '';
const DATABASE_ID = process.env.EXPO_PUBLIC_APPWRITE_DATABASE_ID || '';

async function testConnection() {
  console.log('üîç Testando conex√£o com Appwrite...\n');

  // Verifica vari√°veis de ambiente
  console.log('üìã Verificando configura√ß√£o:');
  console.log(`   Endpoint: ${ENDPOINT || '‚ùå N√ÉO CONFIGURADO'}`);
  console.log(`   Project ID: ${PROJECT_ID || '‚ùå N√ÉO CONFIGURADO'}`);
  console.log(`   API Key: ${API_KEY ? '‚úÖ Configurada' : '‚ùå N√ÉO CONFIGURADA'}`);
  console.log(`   Database ID: ${DATABASE_ID || '‚ö†Ô∏è  N√£o configurado (execute appwrite:setup)'}`);

  if (!ENDPOINT || !PROJECT_ID || !API_KEY) {
    console.error('\n‚ùå Configure todas as vari√°veis de ambiente necess√°rias no .env');
    process.exit(1);
  }

  // Inicializa cliente
  const client = new Client();
  client.setEndpoint(ENDPOINT).setProject(PROJECT_ID).setKey(API_KEY);

  const databases = new Databases(client);

  try {
    // Testa listagem de databases
    console.log('\nüîå Testando conex√£o...');
    const databasesList = await databases.list();
    console.log(`‚úÖ Conex√£o estabelecida!`);
    console.log(`   Databases encontrados: ${databasesList.total}`);

    if (databasesList.total > 0) {
      console.log('\nüì¶ Databases dispon√≠veis:');
      for (const db of databasesList.databases) {
        console.log(`   - ${db.name} (ID: ${db.$id})`);

        if (DATABASE_ID && db.$id === DATABASE_ID) {
          console.log('     ‚úÖ Este √© o database configurado no .env');

          // Lista collections deste database
          try {
            const collections = await databases.listCollections(db.$id);
            console.log(`     Tables: ${collections.total}`);

            if (collections.total > 0) {
              for (const collection of collections.collections) {
                console.log(`       - ${collection.name} (ID: ${collection.$id})`);
              }
            }
          } catch (error: any) {
            console.log(`     ‚ö†Ô∏è  Erro ao listar tables: ${error.message}`);
          }
        }
      }
    } else {
      console.log('\n‚ö†Ô∏è  Nenhum database encontrado. Execute: pnpm appwrite:setup');
    }

    // Verifica permiss√µes
    console.log('\nüîê Verificando permiss√µes da API Key...');
    try {
      // Tenta criar e deletar um database de teste
      const testDb = await databases.create('test-connection', 'Test Connection');
      await databases.delete(testDb.$id);
      console.log('‚úÖ Permiss√µes de escrita: OK');
    } catch (error: any) {
      if (error.code === 401) {
        console.log('‚ùå Permiss√µes insuficientes. Verifique sua API Key.');
      } else {
        console.log('‚úÖ Permiss√µes de escrita: OK');
      }
    }

    console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
    console.log('\nüìù Pr√≥ximos passos:');

    if (!DATABASE_ID) {
      console.log('   1. Execute: pnpm appwrite:setup');
      console.log('   2. Adicione os IDs gerados ao .env');
    } else {
      console.log('   1. Sua configura√ß√£o est√° pronta!');
      console.log('   2. Execute: pnpm start');
    }
  } catch (error: any) {
    console.error('\n‚ùå Erro ao conectar:', error.message);

    if (error.code === 401) {
      console.error('\nüí° Dica: Verifique se:');
      console.error('   - A API Key est√° correta');
      console.error('   - A API Key tem as permiss√µes necess√°rias');
      console.error('   - O Project ID est√° correto');
    } else if (error.code === 404) {
      console.error('\nüí° Dica: Verifique se:');
      console.error('   - O endpoint est√° correto');
      console.error('   - O projeto existe no Appwrite');
    } else {
      console.error('\nüí° Dica: Verifique sua conex√£o com a internet e o endpoint do Appwrite');
    }

    process.exit(1);
  }
}

testConnection();
